(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{651:function(t,_,v){t.exports=v.p+"assets/img/persistent-connections.57b3d802.png"},853:function(t,_,v){"use strict";v.r(_);var a=v(17),e=Object(a.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http发展"}},[t._v("#")]),t._v(" HTTP发展")]),t._v(" "),a("p",[t._v("[TOC]")]),t._v(" "),a("h2",{attrs:{id:"一、http-0-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、http-0-9"}},[t._v("#")]),t._v(" 一、HTTP/0.9")]),t._v(" "),a("p",[t._v("简单的文本协议，只能获取文本资源。")]),t._v(" "),a("h2",{attrs:{id:"二、http-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、http-1-0"}},[t._v("#")]),t._v(" 二、HTTP/1.0")]),t._v(" "),a("p",[t._v("确立了大部分现在使用的技术，但不是正式标准。")]),t._v(" "),a("h2",{attrs:{id:"三、http-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、http-1-1"}},[t._v("#")]),t._v(" 三、HTTP/1.1")]),t._v(" "),a("p",[t._v("目前互联网使用最广泛的协议，功能也非常完善。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-持久连接-长连接-连接复用-http-persistent-connections-也称为-http-keep-alive-或http-connection-reuse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-持久连接-长连接-连接复用-http-persistent-connections-也称为-http-keep-alive-或http-connection-reuse"}},[t._v("#")]),t._v(" 3.1 持久连接/长连接/连接复用（HTTP Persistent Connections， 也称为 HTTP keep-alive 或HTTP connection reuse）")]),t._v(" "),a("blockquote",[a("p",[t._v("建立 1 次 TCP 连接后进行多次请求和响应的交互。")]),t._v(" "),a("p",[t._v("成本均摊：既然TCP的连接和关闭非常耗时间，那么就把这个时间成本由原来的一个请求应答均摊到多个请求应答上。")]),t._v(" "),a("p",[t._v("请求头使用字段:"),a("code",[t._v("Connection:keep-alive")]),t._v("。")])]),t._v(" "),a("p",[a("img",{attrs:{src:v(651),alt:"persistent-connections"}})]),t._v(" "),a("ul",[a("li",[t._v("好处：\n"),a("ol",[a("li",[t._v("减少了 TCP 连接的重复建立和断开所造成的额外开销。")]),t._v(" "),a("li",[t._v("减轻了服务器端的负载。")]),t._v(" "),a("li",[t._v("使HTTP 请求和响应能够更早地结束， Web 页面显示速度提高了。")]),t._v(" "),a("li",[t._v("更容易实现全速传输，因为新开一个 TCP 连接需要慢慢提升传输速度。")])])]),t._v(" "),a("li",[t._v("不足：\n"),a("ul",[a("li",[t._v("因为TCP连接长时间不关闭，服务器必须在内存里保存它的状态，这就占用了服务器的资源。如果有大量的空闲长连接只连不发，就会很快耗尽服务器资源，导致服务器无法为真正有需要的用户提供服务。")]),t._v(" "),a("li",[t._v("解决：服务端和客户端都可以在恰当的时间关闭长连接。\n"),a("ul",[a("li",[t._v("客户端的请求头"),a("code",[t._v("Connection:close")]),t._v("，告诉服务器这次通信后就关闭连接。")])])])])])]),t._v(" "),a("h3",{attrs:{id:"_3-2-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-问题"}},[t._v("#")]),t._v(" 3.2 问题")]),t._v(" "),a("h4",{attrs:{id:"_3-2-1-高延迟带来页面加载速度的降低"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-高延迟带来页面加载速度的降低"}},[t._v("#")]),t._v(" 3.2.1 高延迟带来页面加载速度的降低")]),t._v(" "),a("blockquote",[a("p",[t._v("为了尽可能减少请求数，需要做合并文件、雪碧图、资源内联等优化工作，但是这无疑造成了单个请求内容变大延迟变高的问题，且内嵌的资源不能有效地使用缓存机制。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("现状")]),t._v(" "),a("ul",[a("li",[t._v("随着带宽的增加，延迟并没有显著下降。")]),t._v(" "),a("li",[t._v("并发连接有限。（浏览器限制）")]),t._v(" "),a("li",[a("strong",[t._v("线头阻塞")]),t._v("问题：同一连接同时只能在完成一个HTTP事务（请求/响）才能处理下一个事务。")])])]),t._v(" "),a("li",[a("p",[t._v("解决策略")]),t._v(" "),a("ul",[a("li",[t._v("理想中的长肥管道：源源不断地发送，源源不断地接收，而不是单连接上地串行请求（一次发送一次接收，一次发送一次接收...）。")]),t._v(" "),a("li",[t._v("http1.1还做不到这一点。")])])])]),t._v(" "),a("h4",{attrs:{id:"_3-2-2-无状态特性带来地巨大http头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-无状态特性带来地巨大http头部"}},[t._v("#")]),t._v(" 3.2.2 无状态特性带来地巨大HTTP头部")]),t._v(" "),a("ul",[a("li",[t._v("每一次请求都要加上完整的HTTP头部。")]),t._v(" "),a("li",[t._v("Header 内容多，而且每次请求 Header 不会变化太多，没有相应的压缩传输优化方案。")])]),t._v(" "),a("h4",{attrs:{id:"_3-2-3-服务器不能主动推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-服务器不能主动推送"}},[t._v("#")]),t._v(" 3.2.3 服务器不能主动推送")]),t._v(" "),a("p",[t._v("要通过轮询来获取服务器改动的文件，而服务器不能主动推送。")]),t._v(" "),a("h4",{attrs:{id:"_3-2-4-明文传输不安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-4-明文传输不安全"}},[t._v("#")]),t._v(" 3.2.4 明文传输不安全")]),t._v(" "),a("h4",{attrs:{id:"_3-3-为解决性能做过的努力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-为解决性能做过的努力"}},[t._v("#")]),t._v(" 3.3 为解决性能做过的努力")]),t._v(" "),a("ol",[a("li",[t._v("Spriting 合并多张小图为一张大图，供浏览器JS切割使成小图用。")]),t._v(" "),a("li",[t._v("Inlining内联，将图片嵌入到CSS或者HTML文件中，减少网络请求次数。\n"),a("ul",[a("li",[t._v("将图片压缩成base64格式。")])])]),t._v(" "),a("li",[t._v("Concatenation 拼接，将多个体积较小的 JavaScript 使用 webpack 等工具打包成一个体积更大的J avaScript文件。\n"),a("ul",[a("li",[t._v("1个文件的改动导致用户重新下载多个文件。")])])]),t._v(" "),a("li",[t._v("域名分片，将同一页面的资源分散到不同域名（比如二级子域名）下，提升连接上限。\n"),a("ul",[a("li",[t._v("对于同一个域名，浏览器最多只能同时创建 6~8 个 TCP 连接 (不同浏览器不一样)。")])])])]),t._v(" "),a("h2",{attrs:{id:"四、http-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、http-2"}},[t._v("#")]),t._v(" 四、HTTP/2")]),t._v(" "),a("p",[t._v("参考教程："),a("a",{attrs:{href:"https://juejin.im/post/5b88a4f56fb9a01a0b31a67e",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP2 详解"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("仅在应用层上修改，基于且充分挖掘TCP协议性能。")]),t._v(" "),a("li",[t._v("客户端向server发送request这种模型不会变。")]),t._v(" "),a("li",[t._v("老的scheme不会变，没有http2://，还是http://和https://。")]),t._v(" "),a("li",[t._v("使用http/1.x的客户端和服务器可以无缝的通过代理方式转接到http/2上。")]),t._v(" "),a("li",[t._v("不识别http/2的代理服务器可以将请求降级到http/1.x。")])])]),t._v(" "),a("h3",{attrs:{id:"_4-1-主要特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-主要特性"}},[t._v("#")]),t._v(" 4.1 主要特性")]),t._v(" "),a("h4",{attrs:{id:"_4-1-1-支持服务端推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-支持服务端推送"}},[t._v("#")]),t._v(" 4.1.1 支持服务端推送")]),t._v(" "),a("ul",[a("li",[t._v("浏览器发送一个请求，服务器主动向浏览器推送与这个请求相关的资源，这样浏览器就不用发起后续请求。")]),t._v(" "),a("li",[t._v("并行推送。")]),t._v(" "),a("li",[t._v("Server-Push 主要是针对资源内联做出的优化，相较于 http/1.1 资源内联的优势:\n"),a("ul",[a("li",[t._v("客户端可以缓存推送的资源")]),t._v(" "),a("li",[t._v("客户端可以拒收推送过来的资源")]),t._v(" "),a("li",[t._v("推送资源可以由不同页面共享")]),t._v(" "),a("li",[t._v("服务器可以按照优先级推送资源")])])])]),t._v(" "),a("h4",{attrs:{id:"_4-1-2-支持tcp多路复用-管线化-pipelining"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-支持tcp多路复用-管线化-pipelining"}},[t._v("#")]),t._v(" 4.1.2 支持TCP多路复用（管线化-pipelining)")]),t._v(" "),a("ul",[a("li",[t._v("TCP多路复用，就是使用同一个TCP连接就可以源源不断传输多个HTTP请求。 把 HTTP/1.1 每个请求都当作一个流，那么多个请求变成多个流，请求响应数据分成多个帧，不同流中的帧交错地发送给对方。")]),t._v(" "),a("li",[t._v("流的概念实现了单连接上多请求 - 响应并行，解决了线头阻塞的问题，减少了 TCP 连接数量和 TCP 连接慢启动造成的问题。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Note: 其实很多优化涉及更下层的协议。IP层的分包情况，和物理层的建连时间是需要被考虑的。")])]),t._v(" "),a("h4",{attrs:{id:"_4-1-3-传输数据量的大幅减小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-传输数据量的大幅减小"}},[t._v("#")]),t._v(" 4.1.3 传输数据量的大幅减小")]),t._v(" "),a("ul",[a("li",[t._v("以二进制方式传输。\n"),a("ul",[a("li",[t._v("帧是数据传输的最小单位，以二进制传输代替原本的明文传输，原本的报文消息被划分为更小的数据帧。")])])]),t._v(" "),a("li",[t._v("Header压缩。\n"),a("ul",[a("li",[t._v("使用HPACK算法来压缩首部内容。")])])])]),t._v(" "),a("h3",{attrs:{id:"_4-2-可弃用的http-1优化方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-可弃用的http-1优化方案"}},[t._v("#")]),t._v(" 4.2 可弃用的HTTP/1优化方案")]),t._v(" "),a("p",[t._v("合并文件、内联资源、雪碧图、域名分片对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多。")]),t._v(" "),a("h2",{attrs:{id:"五、http-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、http-3"}},[t._v("#")]),t._v(" 五、HTTP/3")])])}),[],!1,null,null,null);_.default=e.exports}}]);